---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  bootstrap:
    desc: Bootstrap Talos
    summary: |
      Args:
        controller: Controller node to run command against (required)
    prompt: Bootstrap Talos on the '{{.k8s_cluster}}' cluster... continue?
    cmds:
      - task: bootstrap-etcd
        vars: &vars
          controller: "{{.controller}}"
      - task: fetch-kubeconfig
        vars: *vars
      - task: bootstrap-integrations
        vars: *vars
    requires:
      vars:
        - k8s_cluster
        - controller

  bootstrap-etcd:
    desc: Bootstrap Etcd
    cmd: until talosctl --nodes {{.controller}} bootstrap; do sleep 10; done
    requires:
      vars:
        - controller

  bootstrap-integrations:
    desc: Bootstrap core integrations needed for Talos
    cmds:
      - until kubectl wait --for=condition=Ready=False nodes --all --timeout=600s; do sleep 10; done
      - helmfile --kube-context {{.k8s_cluster}} --file {{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl wait --for=condition=Ready nodes --all --timeout=600s; do sleep 10; done
    requires:
      vars:
        - k8s_cluster
    preconditions:
      - which helmfile
      - sh: kubectl config get-contexts {{.k8s_cluster}}
        msg: "Kubectl context {{.k8s_cluster}} not found"
      - test -f {{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/helmfile.yaml

  fetch-kubeconfig:
    desc: Fetch kubeconfig from Talos controllers
    cmd: |
      talosctl kubeconfig --nodes {{.controller}} \
        --force --force-context-name {{.k8s_cluster}} {{.kubernetes_dir}}/{{.k8s_cluster}}
    requires:
      vars:
        - k8s_cluster

  generate-clusterconfig:
    desc: Generate clusterconfig for Talos
    cmds:
      - talhelper genconfig
        --env-file {{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/talos/talenv.sops.yaml
        --secret-file {{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/talos/talsecret.sops.yaml
        --config-file {{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/talos/talconfig.yaml
        --out-dir {{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/talos/clusterconfig
    requires:
      vars:
        - k8s_cluster
    preconditions:
      - test -f {{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/talos/talenv.sops.yaml
      - test -f {{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/talos/talsecret.sops.yaml
      - test -f {{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/talos/talconfig.yaml

  upgrade:
    desc: Upgrade Talos version for a node
    vars:
      TALOS_VERSION:
        sh: |
          yq -r ".talosVersion" {{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/talos/talconfig.yaml
      TALOS_IMAGE:
        sh: |
          talhelper genurl installer \
            --env-file {{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/talos/talenv.sops.yaml \
            --config-file {{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/talos/talconfig.yaml \
          | grep {{.node}} \
          | awk '{split($0,u," "); print u[2]}'
    cmds:
      - talosctl upgrade -n {{.node}} --image {{.TALOS_IMAGE }}
    requires:
      vars:
        - k8s_cluster
        - node
    preconditions:
      - test -f {{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/talos/talenv.sops.yaml
      - test -f {{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/talos/talconfig.yaml
      - msg: "Talos image could not be determined for node={{.node}}"
        sh: 'test -n "{{.TALOS_IMAGE}}"'

  upgrade-k8s:
    desc: Upgrade Kubernetes version for a Talos cluster
    silent: false
    vars:
      KUBERNETES_VERSION:
        sh: |
          yq -r ".kubernetesVersion" {{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/talos/talconfig.yaml
      TALOS_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    cmds:
      - until kubectl wait --timeout=5m --for=condition=Complete jobs --all --all-namespaces; do sleep 10; done
      - talosctl upgrade-k8s -n {{.TALOS_CONTROLLER}} --to {{.KUBERNETES_VERSION}}
    requires:
      vars:
        - k8s_cluster
    preconditions:
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.TALOS_CONTROLLER}} get machineconfig &>/dev/null

  apply-clusterconfig:
    desc: Apply clusterconfig for a Talos cluster
    vars:
      CLUSTERCONFIG_FILES:
        sh: find {{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/talos/clusterconfig -type f -name '*.yaml' -printf '%f\n'
    cmds:
      - for:
          var: CLUSTERCONFIG_FILES
        task: _apply-machineconfig
        vars:
          filename: "{{.ITEM}}"
          hostname: |-
            {{ trimPrefix (printf "%s-" .cluster) .ITEM | trimSuffix ".yaml" }}
          dry_run: "{{ .dry_run }}"
    requires:
      vars:
        - k8s_cluster

  _apply-machineconfig:
    internal: true
    desc: Apply a single Talos machineConfig to a Talos node
    cmds:
      - talosctl apply-config
        --nodes "{{.hostname}}"
        --file "{{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/talos/clusterconfig/{{.filename}}"
        {{ if eq "true" .dry_run }}--dry-run{{ end }}
    requires:
      vars:
        - k8s_cluster
        - hostname
        - filename
    preconditions:
      - test -f {{.kubernetes_dir}}/{{.k8s_cluster}}/bootstrap/talos/clusterconfig/{{.filename}}
